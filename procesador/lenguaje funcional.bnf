
Ejemplo:    
  h(w1    : real) : real = w1 + E;
  mat_rot(t : real) : real = mat3(vec3(cos(t), sin(t), 0), vec3(-sin(t), cos(t), 0), vec3(0,0,1))

  var_x  : real = E**2 + PI;

  x(u,v   : real) : real = if v>1 then cos(PI*u) else v*cos(PI*u);
  y(u,v   : real) : real = if v>1 then sin(PI*u) else (if v<1 then v*sin(PI*u) else sin(PI*u));
  z(u,v   : real,
    t1,t2 : real) : real = t1*h(v+t2);

  f(u,v : real,
    t1,t2 : real) : real = vec3(x(u,v), y(u,v), z(u,v,t1,t2) + var_x);

  g(u,v : real,
    t : real) : real = mat_rot(t)*vec3(x(u,v), y(u,v), z(u,v,1.0,1.0));

  plot f, g ; # Las primeras variables siempre van a ser las que recorren el cuadrado [0,1]x[0,1], 
              #el resto es para controlar las homotopías (modificables en tiempo de ejecución)

______________________________________________________________________________

<Programa>              ::= <lista_sentecias>

<lista_sentecias>       ::= <lista_sentecias> <sentencia>;
                         |  <sentencia>;

<sentencia>             ::= <sentencia_declar_var>
                         |  <sentencia_asign>
                         |  <sentencia_declar_fun>
                         |  <sentencia_plot>

<sentencia_declar_var>  ::= <lista_ident> : <tipo_basico>                  # Declaración variables
                         |  <identificador> : <tipo_basico> = <expresion>  # Declaración y asignación

<sentencia_asign>       ::= <identificador> = <expresion>                  # Asignación variable
                         |  <identificador>[<entero>] = <expresion>
                         |  <identificador>[<entero>][<entero>] = <expresion>

<sentencia_declar_fun>  ::= <identificador>(<lista_param>) : <tipo_basico> = <expresion> # Definición función

<sentencia_plot>        ::= plot <lista_ident>

<expresion>             ::= (<expresion>)
                         |  if <expresion> then <expresion> else <expresion>
                         |  <expresion> <op_binario> <expresion>
                         |  <op_unario> <expresion>
                         |  <vec_or_mat>(<lista_expresiones)      # ¿Meterlo todo con lista_expresiones y hacer después comprobación de tipo y tamaño (en caso de ser vectores)?
                         #|  <vec_or_mat_2>(<expresion>)
                         #|  <vec_or_mat_2>(<expresion>, <expresion>)
                         #|  <vec_or_mat_3>(<expresion>)
                         #|  <vec_or_mat_3>(<expresion>, <expresion>)
                         #|  <vec_or_mat_3>(<expresion>, <expresion>, <expresion>)
                         |  <funcion_predef>(<expresion>)
                         |  <identificador>(<lista_expresiones>)
                         |  <expresion>[<expresion>]
                         |  <identificador>
                         |  <numero_real>
                         |  <constante_predefinida>
                         
<op_binario>            ::= +
                         |  -
                         |  *
                         |  /
                         |  %
                         |  and
                         |  or
                         |  >
                         |  <
                         |  >=
                         |  <=
                         |  ==
                         |  !=
                         |  ^

<op_unario>             ::= -
                         |  !

<funcion_predef>        ::= cos | sin | tan | exp | log

<lista_expresiones>     ::= <lista_expresiones>,<expresion>
                         |  <expresion>

<lista_param>           ::= <lista_param>, <lista_ident> : <tipo_basico> 
                         |  <lista_ident> : <tipo_basico>

<lista_ident>           ::= <lista_ident>, <identificador>
                         |  <identificador>

<tipo_basico>           ::= int
                         |  real
                         |  bool
                         |  <vec_or_mat>

<vec_or_mat>            ::= <vec_or_mat_2> | <vec_or_mat_3> 

<vec_or_mat_2>          ::= vec2 | mat2

<vec_or_mat_3>          ::= vec3 | mat3

<identificador>         ::= <letra><cadena>
                         |  <letra>
                         
<cadena>                ::= <cadena><letra>
                         |  <cadena><numero>
                         |  <letra>
                         |  <numero>

<numero_real>           ::= <numero_entero>
                         |  <numero_entero>.<numero_entero>

<numero_entero>         ::= <numero_entero><numero>
                         |  <numero>

<letra>                 ::= a | ... | z | A | ... | Z

<numero>                ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9

<constante_predefinida> ::= PI | E
