
Ejemplo:    
  h(w1    : real) : real = w1 + E;
  mat_rot(t : real) : real = mat3(vec3(cos(t), sin(t), 0), vec3(-sin(t), cos(t), 0), vec3(0,0,1))

  var_x  : real = E^2 + PI;

  x(u,v   : real) : real = if v>1 then cos(PI*u) else v*cos(PI*u);
  y(u,v   : real) : real = if v>1 then sin(PI*u) else (if v<1 then v*sin(PI*u) else sin(PI*u));
  z(u,v   : real,
    t1,t2 : real) : real = t1*h(v+t2);

  f(u,v : real,
    t1,t2 : real) : real = vec3(x(u,v), y(u,v), z(u,v,t1,t2) + var_x);

  g(u,v : real,
    t : real) : real = mat_rot(t)*vec3(x(u,v), y(u,v), z(u,v,1.0,1.0));

  plot f, g ; # Las primeras variables siempre van a ser las que recorren el cuadrado [0,1]x[0,1], 
              #el resto es para controlar las homotopías (modificables en tiempo de ejecución)

______________________________________________________________________________

<Programa>                ::= <lista_sentecias>

<lista_sentecias>         ::= <lista_sentecias> <sentencia>;
                           |  <sentencia>;

<sentencia>               ::= <sentencia_declar_valor>
                           |  <sentencia_declar_fun>
                           |  <sentencia_plot>

<sentencia_declar_valor>  ::= <identificador> : <identificador> = <expresion>                # Declaración y asignación de una constante

<sentencia_declar_fun>    ::= <identificador>(<lista_param>) : <identificador> = <expresion> # Definición función

<sentencia_plot>          ::= plot <lista_ident>

<expresion>               ::= (<expresion>)
                           |  if <expresion> then <expresion> else <expresion>
                           |  <expresion> <op_binario> <expresion>
                           |  <op_unario> <expresion>
                           |  <identificador>(<lista_expresiones>)    # Incluye las funciones predefinidas
                           |  <expresion>[<expresion>]
                           |  <identificador>                         # Incluye las constantes predefinidas
                           |  <constante>
                         
<op_binario>              ::= +
                           |  -
                           |  *
                           |  /
                           |  and
                           |  or
                           |  >
                           |  <
                           |  >=
                           |  <=
                           |  ==
                           |  !=
                           |  ^

<op_unario>               ::= -
                           |  !

<lista_expresiones>       ::= <lista_expresiones>,<expresion>
                           |  <expresion>

<lista_param>             ::= <lista_param>, <lista_ident> : <identificador> 
                           |  <lista_ident> : <identificador>

<lista_ident>             ::= <lista_ident>, <identificador>
                           |  <identificador>

<identificador>           ::= <letra><cadena>
                           |  <letra>
                         
<cadena>                  ::= <cadena><letra>
                           |  <cadena><numero>
                           |  <letra>
                           |  <numero>

<constante>               ::= <numero_entero>
                           |  <numero_real>
                           |  <bool>

<numero_real>             ::= <numero_entero>
                           |  <numero_entero>.<numero_entero>

<numero_entero>           ::= <numero_entero><numero>
                           |  <numero>

<bool>                    ::= true | false

<letra>                   ::= a | ... | z | A | ... | Z

<numero>                  ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
